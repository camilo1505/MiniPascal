Created by PLY version 3.9 (http://www.dabeaz.com/ply)

Unused terminals:

    CONST
    DIF
    RETURN
    CASE
    BREAK
    TO
    REPEAT
    FOR
    LLAVED
    LLAVEI
    UNTIL
    FUNTION
    DOWNTO

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID PCOMA contenido
Rule 2     program -> PROGRAM ID PCOMA USES ID PCOMA contenido
Rule 3     contenido -> declaraciones
Rule 4     contenido -> declaracion_variables declaraciones
Rule 5     declaracion_variables -> declaracion_variable
Rule 6     declaracion_variable -> VAR dec DPUN type PCOMA
Rule 7     declaracion_variable -> VAR dec DPUN type PCOMA declaracion_variable
Rule 8     dec -> ID
Rule 9     dec -> ID COMA dec
Rule 10    type -> type_simple
Rule 11    type -> type_array
Rule 12    type_array -> ARRAY CORI rango CORD OF type_simple
Rule 13    rango -> CNUM PUNTO PUNTO CNUM
Rule 14    type_simple -> INT
Rule 15    type_simple -> STR
Rule 16    type_simple -> BOOL
Rule 17    type_simple -> FLOAT
Rule 18    type_simple -> CHAR
Rule 19    declaraciones -> declaraciones_compuesta
Rule 20    declaraciones_compuesta -> BEGIN decla END
Rule 21    decla -> declaracion
Rule 22    decla -> decla declaracion
Rule 23    declaracion -> declaracion_simple
Rule 24    declaracion -> declaracion_estructurada
Rule 25    declaracion_simple -> asignacion
Rule 26    declaracion_simple -> lectura
Rule 27    declaracion_simple -> escritura
Rule 28    declaracion_estructurada -> declaraciones_compuesta
Rule 29    declaracion_estructurada -> declaracion_if
Rule 30    declaracion_estructurada -> declaracion_while
Rule 31    declaracion_if -> IF exprecion THEN declaracion
Rule 32    declaracion_if -> IF exprecion THEN declaracion ELSE declaracion
Rule 33    declaracion_while -> WHILE exprecion DO declaracion
Rule 34    asignacion -> ID ASIG exprecion PCOMA
Rule 35    lectura -> READ PARI ID PARD PCOMA
Rule 36    lectura -> READLN PARI ID PARD PCOMA
Rule 37    escritura -> WRITE PARI exp PARD PCOMA
Rule 38    escritura -> WRITELN PARI exp PARD PCOMA
Rule 39    exp -> exprecion
Rule 40    exp -> exprecion COMA exp
Rule 41    exprecion -> exprecion_simple
Rule 42    exprecion -> exprecion_simple operador_relacional exprecion
Rule 43    exprecion_simple -> signo termino
Rule 44    exprecion_simple -> termino
Rule 45    exprecion_simple -> signo termino adicion exprecion_simple
Rule 46    exprecion_simple -> termino adicion exprecion_simple
Rule 47    signo -> MAS
Rule 48    signo -> MENOS
Rule 49    termino -> factor
Rule 50    termino -> factor multipicacion termino
Rule 51    factor -> CNUM
Rule 52    factor -> STRING
Rule 53    factor -> ID
Rule 54    factor -> NUM
Rule 55    factor -> PARI exprecion PARD
Rule 56    factor -> NOT factor
Rule 57    adicion -> MAS
Rule 58    adicion -> MENOS
Rule 59    adicion -> OR
Rule 60    multipicacion -> POR
Rule 61    multipicacion -> DIV
Rule 62    multipicacion -> AND
Rule 63    operador_relacional -> EQ
Rule 64    operador_relacional -> LT
Rule 65    operador_relacional -> GT
Rule 66    operador_relacional -> GE
Rule 67    operador_relacional -> LE

Terminals, with rules where they appear

AND                  : 62
ARRAY                : 12
ASIG                 : 34
BEGIN                : 20
BOOL                 : 16
BREAK                : 
CASE                 : 
CHAR                 : 18
CNUM                 : 13 13 51
COMA                 : 9 40
CONST                : 
CORD                 : 12
CORI                 : 12
DIF                  : 
DIV                  : 61
DO                   : 33
DOWNTO               : 
DPUN                 : 6 7
ELSE                 : 32
END                  : 20
EQ                   : 63
FLOAT                : 17
FOR                  : 
FUNTION              : 
GE                   : 66
GT                   : 65
ID                   : 1 2 2 8 9 34 35 36 53
IF                   : 31 32
INT                  : 14
LE                   : 67
LLAVED               : 
LLAVEI               : 
LT                   : 64
MAS                  : 47 57
MENOS                : 48 58
NOT                  : 56
NUM                  : 54
OF                   : 12
OR                   : 59
PARD                 : 35 36 37 38 55
PARI                 : 35 36 37 38 55
PCOMA                : 1 2 2 6 7 34 35 36 37 38
POR                  : 60
PROGRAM              : 1 2
PUNTO                : 13 13
READ                 : 35
READLN               : 36
REPEAT               : 
RETURN               : 
STR                  : 15
STRING               : 52
THEN                 : 31 32
TO                   : 
UNTIL                : 
USES                 : 2
VAR                  : 6 7
WHILE                : 33
WRITE                : 37
WRITELN              : 38
error                : 

Nonterminals, with rules where they appear

adicion              : 45 46
asignacion           : 25
contenido            : 1 2
dec                  : 6 7 9
decla                : 20 22
declaracion          : 21 22 31 32 32 33
declaracion_estructurada : 24
declaracion_if       : 29
declaracion_simple   : 23
declaracion_variable : 5 7
declaracion_variables : 4
declaracion_while    : 30
declaraciones        : 3 4
declaraciones_compuesta : 19 28
escritura            : 27
exp                  : 37 38 40
exprecion            : 31 32 33 34 39 40 42 55
exprecion_simple     : 41 42 45 46
factor               : 49 50 56
lectura              : 26
multipicacion        : 50
operador_relacional  : 42
program              : 0
rango                : 12
signo                : 43 45
termino              : 43 44 45 46 50
type                 : 6 7
type_array           : 11
type_simple          : 10 12

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID PCOMA contenido
    (2) program -> . PROGRAM ID PCOMA USES ID PCOMA contenido

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID PCOMA contenido
    (2) program -> PROGRAM . ID PCOMA USES ID PCOMA contenido

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . PCOMA contenido
    (2) program -> PROGRAM ID . PCOMA USES ID PCOMA contenido

    PCOMA           shift and go to state 4


state 4

    (1) program -> PROGRAM ID PCOMA . contenido
    (2) program -> PROGRAM ID PCOMA . USES ID PCOMA contenido
    (3) contenido -> . declaraciones
    (4) contenido -> . declaracion_variables declaraciones
    (19) declaraciones -> . declaraciones_compuesta
    (5) declaracion_variables -> . declaracion_variable
    (20) declaraciones_compuesta -> . BEGIN decla END
    (6) declaracion_variable -> . VAR dec DPUN type PCOMA
    (7) declaracion_variable -> . VAR dec DPUN type PCOMA declaracion_variable

    USES            shift and go to state 10
    BEGIN           shift and go to state 6
    VAR             shift and go to state 12

    declaraciones_compuesta        shift and go to state 5
    declaracion_variable           shift and go to state 7
    contenido                      shift and go to state 8
    declaraciones                  shift and go to state 9
    declaracion_variables          shift and go to state 11

state 5

    (19) declaraciones -> declaraciones_compuesta .

    $end            reduce using rule 19 (declaraciones -> declaraciones_compuesta .)


state 6

    (20) declaraciones_compuesta -> BEGIN . decla END
    (21) decla -> . declaracion
    (22) decla -> . decla declaracion
    (23) declaracion -> . declaracion_simple
    (24) declaracion -> . declaracion_estructurada
    (25) declaracion_simple -> . asignacion
    (26) declaracion_simple -> . lectura
    (27) declaracion_simple -> . escritura
    (28) declaracion_estructurada -> . declaraciones_compuesta
    (29) declaracion_estructurada -> . declaracion_if
    (30) declaracion_estructurada -> . declaracion_while
    (34) asignacion -> . ID ASIG exprecion PCOMA
    (35) lectura -> . READ PARI ID PARD PCOMA
    (36) lectura -> . READLN PARI ID PARD PCOMA
    (37) escritura -> . WRITE PARI exp PARD PCOMA
    (38) escritura -> . WRITELN PARI exp PARD PCOMA
    (20) declaraciones_compuesta -> . BEGIN decla END
    (31) declaracion_if -> . IF exprecion THEN declaracion
    (32) declaracion_if -> . IF exprecion THEN declaracion ELSE declaracion
    (33) declaracion_while -> . WHILE exprecion DO declaracion

    ID              shift and go to state 21
    READ            shift and go to state 13
    READLN          shift and go to state 27
    WRITE           shift and go to state 18
    WRITELN         shift and go to state 24
    BEGIN           shift and go to state 6
    IF              shift and go to state 22
    WHILE           shift and go to state 14

    declaraciones_compuesta        shift and go to state 23
    declaracion_while              shift and go to state 15
    asignacion                     shift and go to state 25
    decla                          shift and go to state 26
    lectura                        shift and go to state 17
    declaracion_if                 shift and go to state 19
    declaracion_simple             shift and go to state 20
    declaracion_estructurada       shift and go to state 16
    declaracion                    shift and go to state 28
    escritura                      shift and go to state 29

state 7

    (5) declaracion_variables -> declaracion_variable .

    BEGIN           reduce using rule 5 (declaracion_variables -> declaracion_variable .)


state 8

    (1) program -> PROGRAM ID PCOMA contenido .

    $end            reduce using rule 1 (program -> PROGRAM ID PCOMA contenido .)


state 9

    (3) contenido -> declaraciones .

    $end            reduce using rule 3 (contenido -> declaraciones .)


state 10

    (2) program -> PROGRAM ID PCOMA USES . ID PCOMA contenido

    ID              shift and go to state 30


state 11

    (4) contenido -> declaracion_variables . declaraciones
    (19) declaraciones -> . declaraciones_compuesta
    (20) declaraciones_compuesta -> . BEGIN decla END

    BEGIN           shift and go to state 6

    declaraciones                  shift and go to state 31
    declaraciones_compuesta        shift and go to state 5

state 12

    (6) declaracion_variable -> VAR . dec DPUN type PCOMA
    (7) declaracion_variable -> VAR . dec DPUN type PCOMA declaracion_variable
    (8) dec -> . ID
    (9) dec -> . ID COMA dec

    ID              shift and go to state 33

    dec                            shift and go to state 32

state 13

    (35) lectura -> READ . PARI ID PARD PCOMA

    PARI            shift and go to state 34


state 14

    (33) declaracion_while -> WHILE . exprecion DO declaracion
    (41) exprecion -> . exprecion_simple
    (42) exprecion -> . exprecion_simple operador_relacional exprecion
    (43) exprecion_simple -> . signo termino
    (44) exprecion_simple -> . termino
    (45) exprecion_simple -> . signo termino adicion exprecion_simple
    (46) exprecion_simple -> . termino adicion exprecion_simple
    (47) signo -> . MAS
    (48) signo -> . MENOS
    (49) termino -> . factor
    (50) termino -> . factor multipicacion termino
    (51) factor -> . CNUM
    (52) factor -> . STRING
    (53) factor -> . ID
    (54) factor -> . NUM
    (55) factor -> . PARI exprecion PARD
    (56) factor -> . NOT factor

    MAS             shift and go to state 35
    MENOS           shift and go to state 41
    CNUM            shift and go to state 37
    STRING          shift and go to state 36
    ID              shift and go to state 47
    NUM             shift and go to state 45
    PARI            shift and go to state 46
    NOT             shift and go to state 44

    exprecion_simple               shift and go to state 38
    signo                          shift and go to state 39
    exprecion                      shift and go to state 40
    termino                        shift and go to state 42
    factor                         shift and go to state 43

state 15

    (30) declaracion_estructurada -> declaracion_while .

    END             reduce using rule 30 (declaracion_estructurada -> declaracion_while .)
    ID              reduce using rule 30 (declaracion_estructurada -> declaracion_while .)
    READ            reduce using rule 30 (declaracion_estructurada -> declaracion_while .)
    READLN          reduce using rule 30 (declaracion_estructurada -> declaracion_while .)
    WRITE           reduce using rule 30 (declaracion_estructurada -> declaracion_while .)
    WRITELN         reduce using rule 30 (declaracion_estructurada -> declaracion_while .)
    BEGIN           reduce using rule 30 (declaracion_estructurada -> declaracion_while .)
    IF              reduce using rule 30 (declaracion_estructurada -> declaracion_while .)
    WHILE           reduce using rule 30 (declaracion_estructurada -> declaracion_while .)
    ELSE            reduce using rule 30 (declaracion_estructurada -> declaracion_while .)


state 16

    (24) declaracion -> declaracion_estructurada .

    END             reduce using rule 24 (declaracion -> declaracion_estructurada .)
    ID              reduce using rule 24 (declaracion -> declaracion_estructurada .)
    READ            reduce using rule 24 (declaracion -> declaracion_estructurada .)
    READLN          reduce using rule 24 (declaracion -> declaracion_estructurada .)
    WRITE           reduce using rule 24 (declaracion -> declaracion_estructurada .)
    WRITELN         reduce using rule 24 (declaracion -> declaracion_estructurada .)
    BEGIN           reduce using rule 24 (declaracion -> declaracion_estructurada .)
    IF              reduce using rule 24 (declaracion -> declaracion_estructurada .)
    WHILE           reduce using rule 24 (declaracion -> declaracion_estructurada .)
    ELSE            reduce using rule 24 (declaracion -> declaracion_estructurada .)


state 17

    (26) declaracion_simple -> lectura .

    END             reduce using rule 26 (declaracion_simple -> lectura .)
    ID              reduce using rule 26 (declaracion_simple -> lectura .)
    READ            reduce using rule 26 (declaracion_simple -> lectura .)
    READLN          reduce using rule 26 (declaracion_simple -> lectura .)
    WRITE           reduce using rule 26 (declaracion_simple -> lectura .)
    WRITELN         reduce using rule 26 (declaracion_simple -> lectura .)
    BEGIN           reduce using rule 26 (declaracion_simple -> lectura .)
    IF              reduce using rule 26 (declaracion_simple -> lectura .)
    WHILE           reduce using rule 26 (declaracion_simple -> lectura .)
    ELSE            reduce using rule 26 (declaracion_simple -> lectura .)


state 18

    (37) escritura -> WRITE . PARI exp PARD PCOMA

    PARI            shift and go to state 48


state 19

    (29) declaracion_estructurada -> declaracion_if .

    END             reduce using rule 29 (declaracion_estructurada -> declaracion_if .)
    ID              reduce using rule 29 (declaracion_estructurada -> declaracion_if .)
    READ            reduce using rule 29 (declaracion_estructurada -> declaracion_if .)
    READLN          reduce using rule 29 (declaracion_estructurada -> declaracion_if .)
    WRITE           reduce using rule 29 (declaracion_estructurada -> declaracion_if .)
    WRITELN         reduce using rule 29 (declaracion_estructurada -> declaracion_if .)
    BEGIN           reduce using rule 29 (declaracion_estructurada -> declaracion_if .)
    IF              reduce using rule 29 (declaracion_estructurada -> declaracion_if .)
    WHILE           reduce using rule 29 (declaracion_estructurada -> declaracion_if .)
    ELSE            reduce using rule 29 (declaracion_estructurada -> declaracion_if .)


state 20

    (23) declaracion -> declaracion_simple .

    END             reduce using rule 23 (declaracion -> declaracion_simple .)
    ID              reduce using rule 23 (declaracion -> declaracion_simple .)
    READ            reduce using rule 23 (declaracion -> declaracion_simple .)
    READLN          reduce using rule 23 (declaracion -> declaracion_simple .)
    WRITE           reduce using rule 23 (declaracion -> declaracion_simple .)
    WRITELN         reduce using rule 23 (declaracion -> declaracion_simple .)
    BEGIN           reduce using rule 23 (declaracion -> declaracion_simple .)
    IF              reduce using rule 23 (declaracion -> declaracion_simple .)
    WHILE           reduce using rule 23 (declaracion -> declaracion_simple .)
    ELSE            reduce using rule 23 (declaracion -> declaracion_simple .)


state 21

    (34) asignacion -> ID . ASIG exprecion PCOMA

    ASIG            shift and go to state 49


state 22

    (31) declaracion_if -> IF . exprecion THEN declaracion
    (32) declaracion_if -> IF . exprecion THEN declaracion ELSE declaracion
    (41) exprecion -> . exprecion_simple
    (42) exprecion -> . exprecion_simple operador_relacional exprecion
    (43) exprecion_simple -> . signo termino
    (44) exprecion_simple -> . termino
    (45) exprecion_simple -> . signo termino adicion exprecion_simple
    (46) exprecion_simple -> . termino adicion exprecion_simple
    (47) signo -> . MAS
    (48) signo -> . MENOS
    (49) termino -> . factor
    (50) termino -> . factor multipicacion termino
    (51) factor -> . CNUM
    (52) factor -> . STRING
    (53) factor -> . ID
    (54) factor -> . NUM
    (55) factor -> . PARI exprecion PARD
    (56) factor -> . NOT factor

    MAS             shift and go to state 35
    MENOS           shift and go to state 41
    CNUM            shift and go to state 37
    STRING          shift and go to state 36
    ID              shift and go to state 47
    NUM             shift and go to state 45
    PARI            shift and go to state 46
    NOT             shift and go to state 44

    exprecion_simple               shift and go to state 38
    signo                          shift and go to state 39
    exprecion                      shift and go to state 50
    termino                        shift and go to state 42
    factor                         shift and go to state 43

state 23

    (28) declaracion_estructurada -> declaraciones_compuesta .

    END             reduce using rule 28 (declaracion_estructurada -> declaraciones_compuesta .)
    ID              reduce using rule 28 (declaracion_estructurada -> declaraciones_compuesta .)
    READ            reduce using rule 28 (declaracion_estructurada -> declaraciones_compuesta .)
    READLN          reduce using rule 28 (declaracion_estructurada -> declaraciones_compuesta .)
    WRITE           reduce using rule 28 (declaracion_estructurada -> declaraciones_compuesta .)
    WRITELN         reduce using rule 28 (declaracion_estructurada -> declaraciones_compuesta .)
    BEGIN           reduce using rule 28 (declaracion_estructurada -> declaraciones_compuesta .)
    IF              reduce using rule 28 (declaracion_estructurada -> declaraciones_compuesta .)
    WHILE           reduce using rule 28 (declaracion_estructurada -> declaraciones_compuesta .)
    ELSE            reduce using rule 28 (declaracion_estructurada -> declaraciones_compuesta .)


state 24

    (38) escritura -> WRITELN . PARI exp PARD PCOMA

    PARI            shift and go to state 51


state 25

    (25) declaracion_simple -> asignacion .

    END             reduce using rule 25 (declaracion_simple -> asignacion .)
    ID              reduce using rule 25 (declaracion_simple -> asignacion .)
    READ            reduce using rule 25 (declaracion_simple -> asignacion .)
    READLN          reduce using rule 25 (declaracion_simple -> asignacion .)
    WRITE           reduce using rule 25 (declaracion_simple -> asignacion .)
    WRITELN         reduce using rule 25 (declaracion_simple -> asignacion .)
    BEGIN           reduce using rule 25 (declaracion_simple -> asignacion .)
    IF              reduce using rule 25 (declaracion_simple -> asignacion .)
    WHILE           reduce using rule 25 (declaracion_simple -> asignacion .)
    ELSE            reduce using rule 25 (declaracion_simple -> asignacion .)


state 26

    (20) declaraciones_compuesta -> BEGIN decla . END
    (22) decla -> decla . declaracion
    (23) declaracion -> . declaracion_simple
    (24) declaracion -> . declaracion_estructurada
    (25) declaracion_simple -> . asignacion
    (26) declaracion_simple -> . lectura
    (27) declaracion_simple -> . escritura
    (28) declaracion_estructurada -> . declaraciones_compuesta
    (29) declaracion_estructurada -> . declaracion_if
    (30) declaracion_estructurada -> . declaracion_while
    (34) asignacion -> . ID ASIG exprecion PCOMA
    (35) lectura -> . READ PARI ID PARD PCOMA
    (36) lectura -> . READLN PARI ID PARD PCOMA
    (37) escritura -> . WRITE PARI exp PARD PCOMA
    (38) escritura -> . WRITELN PARI exp PARD PCOMA
    (20) declaraciones_compuesta -> . BEGIN decla END
    (31) declaracion_if -> . IF exprecion THEN declaracion
    (32) declaracion_if -> . IF exprecion THEN declaracion ELSE declaracion
    (33) declaracion_while -> . WHILE exprecion DO declaracion

    END             shift and go to state 52
    ID              shift and go to state 21
    READ            shift and go to state 13
    READLN          shift and go to state 27
    WRITE           shift and go to state 18
    WRITELN         shift and go to state 24
    BEGIN           shift and go to state 6
    IF              shift and go to state 22
    WHILE           shift and go to state 14

    declaraciones_compuesta        shift and go to state 23
    declaracion_while              shift and go to state 15
    asignacion                     shift and go to state 25
    lectura                        shift and go to state 17
    declaracion_if                 shift and go to state 19
    declaracion_simple             shift and go to state 20
    declaracion_estructurada       shift and go to state 16
    declaracion                    shift and go to state 53
    escritura                      shift and go to state 29

state 27

    (36) lectura -> READLN . PARI ID PARD PCOMA

    PARI            shift and go to state 54


state 28

    (21) decla -> declaracion .

    END             reduce using rule 21 (decla -> declaracion .)
    ID              reduce using rule 21 (decla -> declaracion .)
    READ            reduce using rule 21 (decla -> declaracion .)
    READLN          reduce using rule 21 (decla -> declaracion .)
    WRITE           reduce using rule 21 (decla -> declaracion .)
    WRITELN         reduce using rule 21 (decla -> declaracion .)
    BEGIN           reduce using rule 21 (decla -> declaracion .)
    IF              reduce using rule 21 (decla -> declaracion .)
    WHILE           reduce using rule 21 (decla -> declaracion .)


state 29

    (27) declaracion_simple -> escritura .

    END             reduce using rule 27 (declaracion_simple -> escritura .)
    ID              reduce using rule 27 (declaracion_simple -> escritura .)
    READ            reduce using rule 27 (declaracion_simple -> escritura .)
    READLN          reduce using rule 27 (declaracion_simple -> escritura .)
    WRITE           reduce using rule 27 (declaracion_simple -> escritura .)
    WRITELN         reduce using rule 27 (declaracion_simple -> escritura .)
    BEGIN           reduce using rule 27 (declaracion_simple -> escritura .)
    IF              reduce using rule 27 (declaracion_simple -> escritura .)
    WHILE           reduce using rule 27 (declaracion_simple -> escritura .)
    ELSE            reduce using rule 27 (declaracion_simple -> escritura .)


state 30

    (2) program -> PROGRAM ID PCOMA USES ID . PCOMA contenido

    PCOMA           shift and go to state 55


state 31

    (4) contenido -> declaracion_variables declaraciones .

    $end            reduce using rule 4 (contenido -> declaracion_variables declaraciones .)


state 32

    (6) declaracion_variable -> VAR dec . DPUN type PCOMA
    (7) declaracion_variable -> VAR dec . DPUN type PCOMA declaracion_variable

    DPUN            shift and go to state 56


state 33

    (8) dec -> ID .
    (9) dec -> ID . COMA dec

    DPUN            reduce using rule 8 (dec -> ID .)
    COMA            shift and go to state 57


state 34

    (35) lectura -> READ PARI . ID PARD PCOMA

    ID              shift and go to state 58


state 35

    (47) signo -> MAS .

    CNUM            reduce using rule 47 (signo -> MAS .)
    STRING          reduce using rule 47 (signo -> MAS .)
    ID              reduce using rule 47 (signo -> MAS .)
    NUM             reduce using rule 47 (signo -> MAS .)
    PARI            reduce using rule 47 (signo -> MAS .)
    NOT             reduce using rule 47 (signo -> MAS .)


state 36

    (52) factor -> STRING .

    POR             reduce using rule 52 (factor -> STRING .)
    DIV             reduce using rule 52 (factor -> STRING .)
    AND             reduce using rule 52 (factor -> STRING .)
    MAS             reduce using rule 52 (factor -> STRING .)
    MENOS           reduce using rule 52 (factor -> STRING .)
    OR              reduce using rule 52 (factor -> STRING .)
    EQ              reduce using rule 52 (factor -> STRING .)
    LT              reduce using rule 52 (factor -> STRING .)
    GT              reduce using rule 52 (factor -> STRING .)
    GE              reduce using rule 52 (factor -> STRING .)
    LE              reduce using rule 52 (factor -> STRING .)
    COMA            reduce using rule 52 (factor -> STRING .)
    PARD            reduce using rule 52 (factor -> STRING .)
    THEN            reduce using rule 52 (factor -> STRING .)
    DO              reduce using rule 52 (factor -> STRING .)
    PCOMA           reduce using rule 52 (factor -> STRING .)


state 37

    (51) factor -> CNUM .

    POR             reduce using rule 51 (factor -> CNUM .)
    DIV             reduce using rule 51 (factor -> CNUM .)
    AND             reduce using rule 51 (factor -> CNUM .)
    MAS             reduce using rule 51 (factor -> CNUM .)
    MENOS           reduce using rule 51 (factor -> CNUM .)
    OR              reduce using rule 51 (factor -> CNUM .)
    EQ              reduce using rule 51 (factor -> CNUM .)
    LT              reduce using rule 51 (factor -> CNUM .)
    GT              reduce using rule 51 (factor -> CNUM .)
    GE              reduce using rule 51 (factor -> CNUM .)
    LE              reduce using rule 51 (factor -> CNUM .)
    COMA            reduce using rule 51 (factor -> CNUM .)
    PARD            reduce using rule 51 (factor -> CNUM .)
    THEN            reduce using rule 51 (factor -> CNUM .)
    DO              reduce using rule 51 (factor -> CNUM .)
    PCOMA           reduce using rule 51 (factor -> CNUM .)


state 38

    (41) exprecion -> exprecion_simple .
    (42) exprecion -> exprecion_simple . operador_relacional exprecion
    (63) operador_relacional -> . EQ
    (64) operador_relacional -> . LT
    (65) operador_relacional -> . GT
    (66) operador_relacional -> . GE
    (67) operador_relacional -> . LE

    DO              reduce using rule 41 (exprecion -> exprecion_simple .)
    PARD            reduce using rule 41 (exprecion -> exprecion_simple .)
    THEN            reduce using rule 41 (exprecion -> exprecion_simple .)
    COMA            reduce using rule 41 (exprecion -> exprecion_simple .)
    PCOMA           reduce using rule 41 (exprecion -> exprecion_simple .)
    EQ              shift and go to state 64
    LT              shift and go to state 62
    GT              shift and go to state 59
    GE              shift and go to state 60
    LE              shift and go to state 63

    operador_relacional            shift and go to state 61

state 39

    (43) exprecion_simple -> signo . termino
    (45) exprecion_simple -> signo . termino adicion exprecion_simple
    (49) termino -> . factor
    (50) termino -> . factor multipicacion termino
    (51) factor -> . CNUM
    (52) factor -> . STRING
    (53) factor -> . ID
    (54) factor -> . NUM
    (55) factor -> . PARI exprecion PARD
    (56) factor -> . NOT factor

    CNUM            shift and go to state 37
    STRING          shift and go to state 36
    ID              shift and go to state 47
    NUM             shift and go to state 45
    PARI            shift and go to state 46
    NOT             shift and go to state 44

    termino                        shift and go to state 65
    factor                         shift and go to state 43

state 40

    (33) declaracion_while -> WHILE exprecion . DO declaracion

    DO              shift and go to state 66


state 41

    (48) signo -> MENOS .

    CNUM            reduce using rule 48 (signo -> MENOS .)
    STRING          reduce using rule 48 (signo -> MENOS .)
    ID              reduce using rule 48 (signo -> MENOS .)
    NUM             reduce using rule 48 (signo -> MENOS .)
    PARI            reduce using rule 48 (signo -> MENOS .)
    NOT             reduce using rule 48 (signo -> MENOS .)


state 42

    (44) exprecion_simple -> termino .
    (46) exprecion_simple -> termino . adicion exprecion_simple
    (57) adicion -> . MAS
    (58) adicion -> . MENOS
    (59) adicion -> . OR

    EQ              reduce using rule 44 (exprecion_simple -> termino .)
    LT              reduce using rule 44 (exprecion_simple -> termino .)
    GT              reduce using rule 44 (exprecion_simple -> termino .)
    GE              reduce using rule 44 (exprecion_simple -> termino .)
    LE              reduce using rule 44 (exprecion_simple -> termino .)
    DO              reduce using rule 44 (exprecion_simple -> termino .)
    THEN            reduce using rule 44 (exprecion_simple -> termino .)
    PARD            reduce using rule 44 (exprecion_simple -> termino .)
    COMA            reduce using rule 44 (exprecion_simple -> termino .)
    PCOMA           reduce using rule 44 (exprecion_simple -> termino .)
    MAS             shift and go to state 67
    MENOS           shift and go to state 69
    OR              shift and go to state 70

    adicion                        shift and go to state 68

state 43

    (49) termino -> factor .
    (50) termino -> factor . multipicacion termino
    (60) multipicacion -> . POR
    (61) multipicacion -> . DIV
    (62) multipicacion -> . AND

    MAS             reduce using rule 49 (termino -> factor .)
    MENOS           reduce using rule 49 (termino -> factor .)
    OR              reduce using rule 49 (termino -> factor .)
    EQ              reduce using rule 49 (termino -> factor .)
    LT              reduce using rule 49 (termino -> factor .)
    GT              reduce using rule 49 (termino -> factor .)
    GE              reduce using rule 49 (termino -> factor .)
    LE              reduce using rule 49 (termino -> factor .)
    COMA            reduce using rule 49 (termino -> factor .)
    PARD            reduce using rule 49 (termino -> factor .)
    DO              reduce using rule 49 (termino -> factor .)
    THEN            reduce using rule 49 (termino -> factor .)
    PCOMA           reduce using rule 49 (termino -> factor .)
    POR             shift and go to state 73
    DIV             shift and go to state 74
    AND             shift and go to state 71

    multipicacion                  shift and go to state 72

state 44

    (56) factor -> NOT . factor
    (51) factor -> . CNUM
    (52) factor -> . STRING
    (53) factor -> . ID
    (54) factor -> . NUM
    (55) factor -> . PARI exprecion PARD
    (56) factor -> . NOT factor

    CNUM            shift and go to state 37
    STRING          shift and go to state 36
    ID              shift and go to state 47
    NUM             shift and go to state 45
    PARI            shift and go to state 46
    NOT             shift and go to state 44

    factor                         shift and go to state 75

state 45

    (54) factor -> NUM .

    POR             reduce using rule 54 (factor -> NUM .)
    DIV             reduce using rule 54 (factor -> NUM .)
    AND             reduce using rule 54 (factor -> NUM .)
    MAS             reduce using rule 54 (factor -> NUM .)
    MENOS           reduce using rule 54 (factor -> NUM .)
    OR              reduce using rule 54 (factor -> NUM .)
    EQ              reduce using rule 54 (factor -> NUM .)
    LT              reduce using rule 54 (factor -> NUM .)
    GT              reduce using rule 54 (factor -> NUM .)
    GE              reduce using rule 54 (factor -> NUM .)
    LE              reduce using rule 54 (factor -> NUM .)
    COMA            reduce using rule 54 (factor -> NUM .)
    PARD            reduce using rule 54 (factor -> NUM .)
    THEN            reduce using rule 54 (factor -> NUM .)
    DO              reduce using rule 54 (factor -> NUM .)
    PCOMA           reduce using rule 54 (factor -> NUM .)


state 46

    (55) factor -> PARI . exprecion PARD
    (41) exprecion -> . exprecion_simple
    (42) exprecion -> . exprecion_simple operador_relacional exprecion
    (43) exprecion_simple -> . signo termino
    (44) exprecion_simple -> . termino
    (45) exprecion_simple -> . signo termino adicion exprecion_simple
    (46) exprecion_simple -> . termino adicion exprecion_simple
    (47) signo -> . MAS
    (48) signo -> . MENOS
    (49) termino -> . factor
    (50) termino -> . factor multipicacion termino
    (51) factor -> . CNUM
    (52) factor -> . STRING
    (53) factor -> . ID
    (54) factor -> . NUM
    (55) factor -> . PARI exprecion PARD
    (56) factor -> . NOT factor

    MAS             shift and go to state 35
    MENOS           shift and go to state 41
    CNUM            shift and go to state 37
    STRING          shift and go to state 36
    ID              shift and go to state 47
    NUM             shift and go to state 45
    PARI            shift and go to state 46
    NOT             shift and go to state 44

    exprecion_simple               shift and go to state 38
    signo                          shift and go to state 39
    exprecion                      shift and go to state 76
    termino                        shift and go to state 42
    factor                         shift and go to state 43

state 47

    (53) factor -> ID .

    POR             reduce using rule 53 (factor -> ID .)
    DIV             reduce using rule 53 (factor -> ID .)
    AND             reduce using rule 53 (factor -> ID .)
    MAS             reduce using rule 53 (factor -> ID .)
    MENOS           reduce using rule 53 (factor -> ID .)
    OR              reduce using rule 53 (factor -> ID .)
    EQ              reduce using rule 53 (factor -> ID .)
    LT              reduce using rule 53 (factor -> ID .)
    GT              reduce using rule 53 (factor -> ID .)
    GE              reduce using rule 53 (factor -> ID .)
    LE              reduce using rule 53 (factor -> ID .)
    COMA            reduce using rule 53 (factor -> ID .)
    PARD            reduce using rule 53 (factor -> ID .)
    THEN            reduce using rule 53 (factor -> ID .)
    DO              reduce using rule 53 (factor -> ID .)
    PCOMA           reduce using rule 53 (factor -> ID .)


state 48

    (37) escritura -> WRITE PARI . exp PARD PCOMA
    (39) exp -> . exprecion
    (40) exp -> . exprecion COMA exp
    (41) exprecion -> . exprecion_simple
    (42) exprecion -> . exprecion_simple operador_relacional exprecion
    (43) exprecion_simple -> . signo termino
    (44) exprecion_simple -> . termino
    (45) exprecion_simple -> . signo termino adicion exprecion_simple
    (46) exprecion_simple -> . termino adicion exprecion_simple
    (47) signo -> . MAS
    (48) signo -> . MENOS
    (49) termino -> . factor
    (50) termino -> . factor multipicacion termino
    (51) factor -> . CNUM
    (52) factor -> . STRING
    (53) factor -> . ID
    (54) factor -> . NUM
    (55) factor -> . PARI exprecion PARD
    (56) factor -> . NOT factor

    MAS             shift and go to state 35
    MENOS           shift and go to state 41
    CNUM            shift and go to state 37
    STRING          shift and go to state 36
    ID              shift and go to state 47
    NUM             shift and go to state 45
    PARI            shift and go to state 46
    NOT             shift and go to state 44

    exprecion_simple               shift and go to state 38
    signo                          shift and go to state 39
    exprecion                      shift and go to state 77
    termino                        shift and go to state 42
    exp                            shift and go to state 78
    factor                         shift and go to state 43

state 49

    (34) asignacion -> ID ASIG . exprecion PCOMA
    (41) exprecion -> . exprecion_simple
    (42) exprecion -> . exprecion_simple operador_relacional exprecion
    (43) exprecion_simple -> . signo termino
    (44) exprecion_simple -> . termino
    (45) exprecion_simple -> . signo termino adicion exprecion_simple
    (46) exprecion_simple -> . termino adicion exprecion_simple
    (47) signo -> . MAS
    (48) signo -> . MENOS
    (49) termino -> . factor
    (50) termino -> . factor multipicacion termino
    (51) factor -> . CNUM
    (52) factor -> . STRING
    (53) factor -> . ID
    (54) factor -> . NUM
    (55) factor -> . PARI exprecion PARD
    (56) factor -> . NOT factor

    MAS             shift and go to state 35
    MENOS           shift and go to state 41
    CNUM            shift and go to state 37
    STRING          shift and go to state 36
    ID              shift and go to state 47
    NUM             shift and go to state 45
    PARI            shift and go to state 46
    NOT             shift and go to state 44

    exprecion_simple               shift and go to state 38
    signo                          shift and go to state 39
    exprecion                      shift and go to state 79
    termino                        shift and go to state 42
    factor                         shift and go to state 43

state 50

    (31) declaracion_if -> IF exprecion . THEN declaracion
    (32) declaracion_if -> IF exprecion . THEN declaracion ELSE declaracion

    THEN            shift and go to state 80


state 51

    (38) escritura -> WRITELN PARI . exp PARD PCOMA
    (39) exp -> . exprecion
    (40) exp -> . exprecion COMA exp
    (41) exprecion -> . exprecion_simple
    (42) exprecion -> . exprecion_simple operador_relacional exprecion
    (43) exprecion_simple -> . signo termino
    (44) exprecion_simple -> . termino
    (45) exprecion_simple -> . signo termino adicion exprecion_simple
    (46) exprecion_simple -> . termino adicion exprecion_simple
    (47) signo -> . MAS
    (48) signo -> . MENOS
    (49) termino -> . factor
    (50) termino -> . factor multipicacion termino
    (51) factor -> . CNUM
    (52) factor -> . STRING
    (53) factor -> . ID
    (54) factor -> . NUM
    (55) factor -> . PARI exprecion PARD
    (56) factor -> . NOT factor

    MAS             shift and go to state 35
    MENOS           shift and go to state 41
    CNUM            shift and go to state 37
    STRING          shift and go to state 36
    ID              shift and go to state 47
    NUM             shift and go to state 45
    PARI            shift and go to state 46
    NOT             shift and go to state 44

    exprecion_simple               shift and go to state 38
    signo                          shift and go to state 39
    exprecion                      shift and go to state 77
    termino                        shift and go to state 42
    exp                            shift and go to state 81
    factor                         shift and go to state 43

state 52

    (20) declaraciones_compuesta -> BEGIN decla END .

    END             reduce using rule 20 (declaraciones_compuesta -> BEGIN decla END .)
    ID              reduce using rule 20 (declaraciones_compuesta -> BEGIN decla END .)
    READ            reduce using rule 20 (declaraciones_compuesta -> BEGIN decla END .)
    READLN          reduce using rule 20 (declaraciones_compuesta -> BEGIN decla END .)
    WRITE           reduce using rule 20 (declaraciones_compuesta -> BEGIN decla END .)
    WRITELN         reduce using rule 20 (declaraciones_compuesta -> BEGIN decla END .)
    BEGIN           reduce using rule 20 (declaraciones_compuesta -> BEGIN decla END .)
    IF              reduce using rule 20 (declaraciones_compuesta -> BEGIN decla END .)
    WHILE           reduce using rule 20 (declaraciones_compuesta -> BEGIN decla END .)
    ELSE            reduce using rule 20 (declaraciones_compuesta -> BEGIN decla END .)
    $end            reduce using rule 20 (declaraciones_compuesta -> BEGIN decla END .)


state 53

    (22) decla -> decla declaracion .

    END             reduce using rule 22 (decla -> decla declaracion .)
    ID              reduce using rule 22 (decla -> decla declaracion .)
    READ            reduce using rule 22 (decla -> decla declaracion .)
    READLN          reduce using rule 22 (decla -> decla declaracion .)
    WRITE           reduce using rule 22 (decla -> decla declaracion .)
    WRITELN         reduce using rule 22 (decla -> decla declaracion .)
    BEGIN           reduce using rule 22 (decla -> decla declaracion .)
    IF              reduce using rule 22 (decla -> decla declaracion .)
    WHILE           reduce using rule 22 (decla -> decla declaracion .)


state 54

    (36) lectura -> READLN PARI . ID PARD PCOMA

    ID              shift and go to state 82


state 55

    (2) program -> PROGRAM ID PCOMA USES ID PCOMA . contenido
    (3) contenido -> . declaraciones
    (4) contenido -> . declaracion_variables declaraciones
    (19) declaraciones -> . declaraciones_compuesta
    (5) declaracion_variables -> . declaracion_variable
    (20) declaraciones_compuesta -> . BEGIN decla END
    (6) declaracion_variable -> . VAR dec DPUN type PCOMA
    (7) declaracion_variable -> . VAR dec DPUN type PCOMA declaracion_variable

    BEGIN           shift and go to state 6
    VAR             shift and go to state 12

    declaraciones_compuesta        shift and go to state 5
    declaracion_variable           shift and go to state 7
    contenido                      shift and go to state 83
    declaraciones                  shift and go to state 9
    declaracion_variables          shift and go to state 11

state 56

    (6) declaracion_variable -> VAR dec DPUN . type PCOMA
    (7) declaracion_variable -> VAR dec DPUN . type PCOMA declaracion_variable
    (10) type -> . type_simple
    (11) type -> . type_array
    (14) type_simple -> . INT
    (15) type_simple -> . STR
    (16) type_simple -> . BOOL
    (17) type_simple -> . FLOAT
    (18) type_simple -> . CHAR
    (12) type_array -> . ARRAY CORI rango CORD OF type_simple

    INT             shift and go to state 84
    STR             shift and go to state 89
    BOOL            shift and go to state 88
    FLOAT           shift and go to state 85
    CHAR            shift and go to state 86
    ARRAY           shift and go to state 90

    type_array                     shift and go to state 87
    type                           shift and go to state 91
    type_simple                    shift and go to state 92

state 57

    (9) dec -> ID COMA . dec
    (8) dec -> . ID
    (9) dec -> . ID COMA dec

    ID              shift and go to state 33

    dec                            shift and go to state 93

state 58

    (35) lectura -> READ PARI ID . PARD PCOMA

    PARD            shift and go to state 94


state 59

    (65) operador_relacional -> GT .

    MAS             reduce using rule 65 (operador_relacional -> GT .)
    MENOS           reduce using rule 65 (operador_relacional -> GT .)
    CNUM            reduce using rule 65 (operador_relacional -> GT .)
    STRING          reduce using rule 65 (operador_relacional -> GT .)
    ID              reduce using rule 65 (operador_relacional -> GT .)
    NUM             reduce using rule 65 (operador_relacional -> GT .)
    PARI            reduce using rule 65 (operador_relacional -> GT .)
    NOT             reduce using rule 65 (operador_relacional -> GT .)


state 60

    (66) operador_relacional -> GE .

    MAS             reduce using rule 66 (operador_relacional -> GE .)
    MENOS           reduce using rule 66 (operador_relacional -> GE .)
    CNUM            reduce using rule 66 (operador_relacional -> GE .)
    STRING          reduce using rule 66 (operador_relacional -> GE .)
    ID              reduce using rule 66 (operador_relacional -> GE .)
    NUM             reduce using rule 66 (operador_relacional -> GE .)
    PARI            reduce using rule 66 (operador_relacional -> GE .)
    NOT             reduce using rule 66 (operador_relacional -> GE .)


state 61

    (42) exprecion -> exprecion_simple operador_relacional . exprecion
    (41) exprecion -> . exprecion_simple
    (42) exprecion -> . exprecion_simple operador_relacional exprecion
    (43) exprecion_simple -> . signo termino
    (44) exprecion_simple -> . termino
    (45) exprecion_simple -> . signo termino adicion exprecion_simple
    (46) exprecion_simple -> . termino adicion exprecion_simple
    (47) signo -> . MAS
    (48) signo -> . MENOS
    (49) termino -> . factor
    (50) termino -> . factor multipicacion termino
    (51) factor -> . CNUM
    (52) factor -> . STRING
    (53) factor -> . ID
    (54) factor -> . NUM
    (55) factor -> . PARI exprecion PARD
    (56) factor -> . NOT factor

    MAS             shift and go to state 35
    MENOS           shift and go to state 41
    CNUM            shift and go to state 37
    STRING          shift and go to state 36
    ID              shift and go to state 47
    NUM             shift and go to state 45
    PARI            shift and go to state 46
    NOT             shift and go to state 44

    exprecion_simple               shift and go to state 38
    signo                          shift and go to state 39
    exprecion                      shift and go to state 95
    termino                        shift and go to state 42
    factor                         shift and go to state 43

state 62

    (64) operador_relacional -> LT .

    MAS             reduce using rule 64 (operador_relacional -> LT .)
    MENOS           reduce using rule 64 (operador_relacional -> LT .)
    CNUM            reduce using rule 64 (operador_relacional -> LT .)
    STRING          reduce using rule 64 (operador_relacional -> LT .)
    ID              reduce using rule 64 (operador_relacional -> LT .)
    NUM             reduce using rule 64 (operador_relacional -> LT .)
    PARI            reduce using rule 64 (operador_relacional -> LT .)
    NOT             reduce using rule 64 (operador_relacional -> LT .)


state 63

    (67) operador_relacional -> LE .

    MAS             reduce using rule 67 (operador_relacional -> LE .)
    MENOS           reduce using rule 67 (operador_relacional -> LE .)
    CNUM            reduce using rule 67 (operador_relacional -> LE .)
    STRING          reduce using rule 67 (operador_relacional -> LE .)
    ID              reduce using rule 67 (operador_relacional -> LE .)
    NUM             reduce using rule 67 (operador_relacional -> LE .)
    PARI            reduce using rule 67 (operador_relacional -> LE .)
    NOT             reduce using rule 67 (operador_relacional -> LE .)


state 64

    (63) operador_relacional -> EQ .

    MAS             reduce using rule 63 (operador_relacional -> EQ .)
    MENOS           reduce using rule 63 (operador_relacional -> EQ .)
    CNUM            reduce using rule 63 (operador_relacional -> EQ .)
    STRING          reduce using rule 63 (operador_relacional -> EQ .)
    ID              reduce using rule 63 (operador_relacional -> EQ .)
    NUM             reduce using rule 63 (operador_relacional -> EQ .)
    PARI            reduce using rule 63 (operador_relacional -> EQ .)
    NOT             reduce using rule 63 (operador_relacional -> EQ .)


state 65

    (43) exprecion_simple -> signo termino .
    (45) exprecion_simple -> signo termino . adicion exprecion_simple
    (57) adicion -> . MAS
    (58) adicion -> . MENOS
    (59) adicion -> . OR

    EQ              reduce using rule 43 (exprecion_simple -> signo termino .)
    LT              reduce using rule 43 (exprecion_simple -> signo termino .)
    GT              reduce using rule 43 (exprecion_simple -> signo termino .)
    GE              reduce using rule 43 (exprecion_simple -> signo termino .)
    LE              reduce using rule 43 (exprecion_simple -> signo termino .)
    DO              reduce using rule 43 (exprecion_simple -> signo termino .)
    THEN            reduce using rule 43 (exprecion_simple -> signo termino .)
    PARD            reduce using rule 43 (exprecion_simple -> signo termino .)
    COMA            reduce using rule 43 (exprecion_simple -> signo termino .)
    PCOMA           reduce using rule 43 (exprecion_simple -> signo termino .)
    MAS             shift and go to state 67
    MENOS           shift and go to state 69
    OR              shift and go to state 70

    adicion                        shift and go to state 96

state 66

    (33) declaracion_while -> WHILE exprecion DO . declaracion
    (23) declaracion -> . declaracion_simple
    (24) declaracion -> . declaracion_estructurada
    (25) declaracion_simple -> . asignacion
    (26) declaracion_simple -> . lectura
    (27) declaracion_simple -> . escritura
    (28) declaracion_estructurada -> . declaraciones_compuesta
    (29) declaracion_estructurada -> . declaracion_if
    (30) declaracion_estructurada -> . declaracion_while
    (34) asignacion -> . ID ASIG exprecion PCOMA
    (35) lectura -> . READ PARI ID PARD PCOMA
    (36) lectura -> . READLN PARI ID PARD PCOMA
    (37) escritura -> . WRITE PARI exp PARD PCOMA
    (38) escritura -> . WRITELN PARI exp PARD PCOMA
    (20) declaraciones_compuesta -> . BEGIN decla END
    (31) declaracion_if -> . IF exprecion THEN declaracion
    (32) declaracion_if -> . IF exprecion THEN declaracion ELSE declaracion
    (33) declaracion_while -> . WHILE exprecion DO declaracion

    ID              shift and go to state 21
    READ            shift and go to state 13
    READLN          shift and go to state 27
    WRITE           shift and go to state 18
    WRITELN         shift and go to state 24
    BEGIN           shift and go to state 6
    IF              shift and go to state 22
    WHILE           shift and go to state 14

    declaraciones_compuesta        shift and go to state 23
    declaracion_while              shift and go to state 15
    asignacion                     shift and go to state 25
    lectura                        shift and go to state 17
    declaracion_if                 shift and go to state 19
    declaracion_simple             shift and go to state 20
    declaracion_estructurada       shift and go to state 16
    declaracion                    shift and go to state 97
    escritura                      shift and go to state 29

state 67

    (57) adicion -> MAS .

    MAS             reduce using rule 57 (adicion -> MAS .)
    MENOS           reduce using rule 57 (adicion -> MAS .)
    CNUM            reduce using rule 57 (adicion -> MAS .)
    STRING          reduce using rule 57 (adicion -> MAS .)
    ID              reduce using rule 57 (adicion -> MAS .)
    NUM             reduce using rule 57 (adicion -> MAS .)
    PARI            reduce using rule 57 (adicion -> MAS .)
    NOT             reduce using rule 57 (adicion -> MAS .)


state 68

    (46) exprecion_simple -> termino adicion . exprecion_simple
    (43) exprecion_simple -> . signo termino
    (44) exprecion_simple -> . termino
    (45) exprecion_simple -> . signo termino adicion exprecion_simple
    (46) exprecion_simple -> . termino adicion exprecion_simple
    (47) signo -> . MAS
    (48) signo -> . MENOS
    (49) termino -> . factor
    (50) termino -> . factor multipicacion termino
    (51) factor -> . CNUM
    (52) factor -> . STRING
    (53) factor -> . ID
    (54) factor -> . NUM
    (55) factor -> . PARI exprecion PARD
    (56) factor -> . NOT factor

    MAS             shift and go to state 35
    MENOS           shift and go to state 41
    CNUM            shift and go to state 37
    STRING          shift and go to state 36
    ID              shift and go to state 47
    NUM             shift and go to state 45
    PARI            shift and go to state 46
    NOT             shift and go to state 44

    exprecion_simple               shift and go to state 98
    signo                          shift and go to state 39
    termino                        shift and go to state 42
    factor                         shift and go to state 43

state 69

    (58) adicion -> MENOS .

    MAS             reduce using rule 58 (adicion -> MENOS .)
    MENOS           reduce using rule 58 (adicion -> MENOS .)
    CNUM            reduce using rule 58 (adicion -> MENOS .)
    STRING          reduce using rule 58 (adicion -> MENOS .)
    ID              reduce using rule 58 (adicion -> MENOS .)
    NUM             reduce using rule 58 (adicion -> MENOS .)
    PARI            reduce using rule 58 (adicion -> MENOS .)
    NOT             reduce using rule 58 (adicion -> MENOS .)


state 70

    (59) adicion -> OR .

    MAS             reduce using rule 59 (adicion -> OR .)
    MENOS           reduce using rule 59 (adicion -> OR .)
    CNUM            reduce using rule 59 (adicion -> OR .)
    STRING          reduce using rule 59 (adicion -> OR .)
    ID              reduce using rule 59 (adicion -> OR .)
    NUM             reduce using rule 59 (adicion -> OR .)
    PARI            reduce using rule 59 (adicion -> OR .)
    NOT             reduce using rule 59 (adicion -> OR .)


state 71

    (62) multipicacion -> AND .

    CNUM            reduce using rule 62 (multipicacion -> AND .)
    STRING          reduce using rule 62 (multipicacion -> AND .)
    ID              reduce using rule 62 (multipicacion -> AND .)
    NUM             reduce using rule 62 (multipicacion -> AND .)
    PARI            reduce using rule 62 (multipicacion -> AND .)
    NOT             reduce using rule 62 (multipicacion -> AND .)


state 72

    (50) termino -> factor multipicacion . termino
    (49) termino -> . factor
    (50) termino -> . factor multipicacion termino
    (51) factor -> . CNUM
    (52) factor -> . STRING
    (53) factor -> . ID
    (54) factor -> . NUM
    (55) factor -> . PARI exprecion PARD
    (56) factor -> . NOT factor

    CNUM            shift and go to state 37
    STRING          shift and go to state 36
    ID              shift and go to state 47
    NUM             shift and go to state 45
    PARI            shift and go to state 46
    NOT             shift and go to state 44

    termino                        shift and go to state 99
    factor                         shift and go to state 43

state 73

    (60) multipicacion -> POR .

    CNUM            reduce using rule 60 (multipicacion -> POR .)
    STRING          reduce using rule 60 (multipicacion -> POR .)
    ID              reduce using rule 60 (multipicacion -> POR .)
    NUM             reduce using rule 60 (multipicacion -> POR .)
    PARI            reduce using rule 60 (multipicacion -> POR .)
    NOT             reduce using rule 60 (multipicacion -> POR .)


state 74

    (61) multipicacion -> DIV .

    CNUM            reduce using rule 61 (multipicacion -> DIV .)
    STRING          reduce using rule 61 (multipicacion -> DIV .)
    ID              reduce using rule 61 (multipicacion -> DIV .)
    NUM             reduce using rule 61 (multipicacion -> DIV .)
    PARI            reduce using rule 61 (multipicacion -> DIV .)
    NOT             reduce using rule 61 (multipicacion -> DIV .)


state 75

    (56) factor -> NOT factor .

    POR             reduce using rule 56 (factor -> NOT factor .)
    DIV             reduce using rule 56 (factor -> NOT factor .)
    AND             reduce using rule 56 (factor -> NOT factor .)
    MAS             reduce using rule 56 (factor -> NOT factor .)
    MENOS           reduce using rule 56 (factor -> NOT factor .)
    OR              reduce using rule 56 (factor -> NOT factor .)
    EQ              reduce using rule 56 (factor -> NOT factor .)
    LT              reduce using rule 56 (factor -> NOT factor .)
    GT              reduce using rule 56 (factor -> NOT factor .)
    GE              reduce using rule 56 (factor -> NOT factor .)
    LE              reduce using rule 56 (factor -> NOT factor .)
    COMA            reduce using rule 56 (factor -> NOT factor .)
    PARD            reduce using rule 56 (factor -> NOT factor .)
    THEN            reduce using rule 56 (factor -> NOT factor .)
    DO              reduce using rule 56 (factor -> NOT factor .)
    PCOMA           reduce using rule 56 (factor -> NOT factor .)


state 76

    (55) factor -> PARI exprecion . PARD

    PARD            shift and go to state 100


state 77

    (39) exp -> exprecion .
    (40) exp -> exprecion . COMA exp

    PARD            reduce using rule 39 (exp -> exprecion .)
    COMA            shift and go to state 101


state 78

    (37) escritura -> WRITE PARI exp . PARD PCOMA

    PARD            shift and go to state 102


state 79

    (34) asignacion -> ID ASIG exprecion . PCOMA

    PCOMA           shift and go to state 103


state 80

    (31) declaracion_if -> IF exprecion THEN . declaracion
    (32) declaracion_if -> IF exprecion THEN . declaracion ELSE declaracion
    (23) declaracion -> . declaracion_simple
    (24) declaracion -> . declaracion_estructurada
    (25) declaracion_simple -> . asignacion
    (26) declaracion_simple -> . lectura
    (27) declaracion_simple -> . escritura
    (28) declaracion_estructurada -> . declaraciones_compuesta
    (29) declaracion_estructurada -> . declaracion_if
    (30) declaracion_estructurada -> . declaracion_while
    (34) asignacion -> . ID ASIG exprecion PCOMA
    (35) lectura -> . READ PARI ID PARD PCOMA
    (36) lectura -> . READLN PARI ID PARD PCOMA
    (37) escritura -> . WRITE PARI exp PARD PCOMA
    (38) escritura -> . WRITELN PARI exp PARD PCOMA
    (20) declaraciones_compuesta -> . BEGIN decla END
    (31) declaracion_if -> . IF exprecion THEN declaracion
    (32) declaracion_if -> . IF exprecion THEN declaracion ELSE declaracion
    (33) declaracion_while -> . WHILE exprecion DO declaracion

    ID              shift and go to state 21
    READ            shift and go to state 13
    READLN          shift and go to state 27
    WRITE           shift and go to state 18
    WRITELN         shift and go to state 24
    BEGIN           shift and go to state 6
    IF              shift and go to state 22
    WHILE           shift and go to state 14

    declaraciones_compuesta        shift and go to state 23
    declaracion_while              shift and go to state 15
    asignacion                     shift and go to state 25
    lectura                        shift and go to state 17
    declaracion_if                 shift and go to state 19
    declaracion_simple             shift and go to state 20
    declaracion_estructurada       shift and go to state 16
    declaracion                    shift and go to state 104
    escritura                      shift and go to state 29

state 81

    (38) escritura -> WRITELN PARI exp . PARD PCOMA

    PARD            shift and go to state 105


state 82

    (36) lectura -> READLN PARI ID . PARD PCOMA

    PARD            shift and go to state 106


state 83

    (2) program -> PROGRAM ID PCOMA USES ID PCOMA contenido .

    $end            reduce using rule 2 (program -> PROGRAM ID PCOMA USES ID PCOMA contenido .)


state 84

    (14) type_simple -> INT .

    PCOMA           reduce using rule 14 (type_simple -> INT .)


state 85

    (17) type_simple -> FLOAT .

    PCOMA           reduce using rule 17 (type_simple -> FLOAT .)


state 86

    (18) type_simple -> CHAR .

    PCOMA           reduce using rule 18 (type_simple -> CHAR .)


state 87

    (11) type -> type_array .

    PCOMA           reduce using rule 11 (type -> type_array .)


state 88

    (16) type_simple -> BOOL .

    PCOMA           reduce using rule 16 (type_simple -> BOOL .)


state 89

    (15) type_simple -> STR .

    PCOMA           reduce using rule 15 (type_simple -> STR .)


state 90

    (12) type_array -> ARRAY . CORI rango CORD OF type_simple

    CORI            shift and go to state 107


state 91

    (6) declaracion_variable -> VAR dec DPUN type . PCOMA
    (7) declaracion_variable -> VAR dec DPUN type . PCOMA declaracion_variable

    PCOMA           shift and go to state 108


state 92

    (10) type -> type_simple .

    PCOMA           reduce using rule 10 (type -> type_simple .)


state 93

    (9) dec -> ID COMA dec .

    DPUN            reduce using rule 9 (dec -> ID COMA dec .)


state 94

    (35) lectura -> READ PARI ID PARD . PCOMA

    PCOMA           shift and go to state 109


state 95

    (42) exprecion -> exprecion_simple operador_relacional exprecion .

    DO              reduce using rule 42 (exprecion -> exprecion_simple operador_relacional exprecion .)
    PARD            reduce using rule 42 (exprecion -> exprecion_simple operador_relacional exprecion .)
    THEN            reduce using rule 42 (exprecion -> exprecion_simple operador_relacional exprecion .)
    COMA            reduce using rule 42 (exprecion -> exprecion_simple operador_relacional exprecion .)
    PCOMA           reduce using rule 42 (exprecion -> exprecion_simple operador_relacional exprecion .)


state 96

    (45) exprecion_simple -> signo termino adicion . exprecion_simple
    (43) exprecion_simple -> . signo termino
    (44) exprecion_simple -> . termino
    (45) exprecion_simple -> . signo termino adicion exprecion_simple
    (46) exprecion_simple -> . termino adicion exprecion_simple
    (47) signo -> . MAS
    (48) signo -> . MENOS
    (49) termino -> . factor
    (50) termino -> . factor multipicacion termino
    (51) factor -> . CNUM
    (52) factor -> . STRING
    (53) factor -> . ID
    (54) factor -> . NUM
    (55) factor -> . PARI exprecion PARD
    (56) factor -> . NOT factor

    MAS             shift and go to state 35
    MENOS           shift and go to state 41
    CNUM            shift and go to state 37
    STRING          shift and go to state 36
    ID              shift and go to state 47
    NUM             shift and go to state 45
    PARI            shift and go to state 46
    NOT             shift and go to state 44

    exprecion_simple               shift and go to state 110
    signo                          shift and go to state 39
    termino                        shift and go to state 42
    factor                         shift and go to state 43

state 97

    (33) declaracion_while -> WHILE exprecion DO declaracion .

    END             reduce using rule 33 (declaracion_while -> WHILE exprecion DO declaracion .)
    ID              reduce using rule 33 (declaracion_while -> WHILE exprecion DO declaracion .)
    READ            reduce using rule 33 (declaracion_while -> WHILE exprecion DO declaracion .)
    READLN          reduce using rule 33 (declaracion_while -> WHILE exprecion DO declaracion .)
    WRITE           reduce using rule 33 (declaracion_while -> WHILE exprecion DO declaracion .)
    WRITELN         reduce using rule 33 (declaracion_while -> WHILE exprecion DO declaracion .)
    BEGIN           reduce using rule 33 (declaracion_while -> WHILE exprecion DO declaracion .)
    IF              reduce using rule 33 (declaracion_while -> WHILE exprecion DO declaracion .)
    WHILE           reduce using rule 33 (declaracion_while -> WHILE exprecion DO declaracion .)
    ELSE            reduce using rule 33 (declaracion_while -> WHILE exprecion DO declaracion .)


state 98

    (46) exprecion_simple -> termino adicion exprecion_simple .

    EQ              reduce using rule 46 (exprecion_simple -> termino adicion exprecion_simple .)
    LT              reduce using rule 46 (exprecion_simple -> termino adicion exprecion_simple .)
    GT              reduce using rule 46 (exprecion_simple -> termino adicion exprecion_simple .)
    GE              reduce using rule 46 (exprecion_simple -> termino adicion exprecion_simple .)
    LE              reduce using rule 46 (exprecion_simple -> termino adicion exprecion_simple .)
    DO              reduce using rule 46 (exprecion_simple -> termino adicion exprecion_simple .)
    THEN            reduce using rule 46 (exprecion_simple -> termino adicion exprecion_simple .)
    PARD            reduce using rule 46 (exprecion_simple -> termino adicion exprecion_simple .)
    COMA            reduce using rule 46 (exprecion_simple -> termino adicion exprecion_simple .)
    PCOMA           reduce using rule 46 (exprecion_simple -> termino adicion exprecion_simple .)


state 99

    (50) termino -> factor multipicacion termino .

    MAS             reduce using rule 50 (termino -> factor multipicacion termino .)
    MENOS           reduce using rule 50 (termino -> factor multipicacion termino .)
    OR              reduce using rule 50 (termino -> factor multipicacion termino .)
    EQ              reduce using rule 50 (termino -> factor multipicacion termino .)
    LT              reduce using rule 50 (termino -> factor multipicacion termino .)
    GT              reduce using rule 50 (termino -> factor multipicacion termino .)
    GE              reduce using rule 50 (termino -> factor multipicacion termino .)
    LE              reduce using rule 50 (termino -> factor multipicacion termino .)
    COMA            reduce using rule 50 (termino -> factor multipicacion termino .)
    PARD            reduce using rule 50 (termino -> factor multipicacion termino .)
    DO              reduce using rule 50 (termino -> factor multipicacion termino .)
    THEN            reduce using rule 50 (termino -> factor multipicacion termino .)
    PCOMA           reduce using rule 50 (termino -> factor multipicacion termino .)


state 100

    (55) factor -> PARI exprecion PARD .

    POR             reduce using rule 55 (factor -> PARI exprecion PARD .)
    DIV             reduce using rule 55 (factor -> PARI exprecion PARD .)
    AND             reduce using rule 55 (factor -> PARI exprecion PARD .)
    MAS             reduce using rule 55 (factor -> PARI exprecion PARD .)
    MENOS           reduce using rule 55 (factor -> PARI exprecion PARD .)
    OR              reduce using rule 55 (factor -> PARI exprecion PARD .)
    EQ              reduce using rule 55 (factor -> PARI exprecion PARD .)
    LT              reduce using rule 55 (factor -> PARI exprecion PARD .)
    GT              reduce using rule 55 (factor -> PARI exprecion PARD .)
    GE              reduce using rule 55 (factor -> PARI exprecion PARD .)
    LE              reduce using rule 55 (factor -> PARI exprecion PARD .)
    COMA            reduce using rule 55 (factor -> PARI exprecion PARD .)
    PARD            reduce using rule 55 (factor -> PARI exprecion PARD .)
    THEN            reduce using rule 55 (factor -> PARI exprecion PARD .)
    DO              reduce using rule 55 (factor -> PARI exprecion PARD .)
    PCOMA           reduce using rule 55 (factor -> PARI exprecion PARD .)


state 101

    (40) exp -> exprecion COMA . exp
    (39) exp -> . exprecion
    (40) exp -> . exprecion COMA exp
    (41) exprecion -> . exprecion_simple
    (42) exprecion -> . exprecion_simple operador_relacional exprecion
    (43) exprecion_simple -> . signo termino
    (44) exprecion_simple -> . termino
    (45) exprecion_simple -> . signo termino adicion exprecion_simple
    (46) exprecion_simple -> . termino adicion exprecion_simple
    (47) signo -> . MAS
    (48) signo -> . MENOS
    (49) termino -> . factor
    (50) termino -> . factor multipicacion termino
    (51) factor -> . CNUM
    (52) factor -> . STRING
    (53) factor -> . ID
    (54) factor -> . NUM
    (55) factor -> . PARI exprecion PARD
    (56) factor -> . NOT factor

    MAS             shift and go to state 35
    MENOS           shift and go to state 41
    CNUM            shift and go to state 37
    STRING          shift and go to state 36
    ID              shift and go to state 47
    NUM             shift and go to state 45
    PARI            shift and go to state 46
    NOT             shift and go to state 44

    exprecion_simple               shift and go to state 38
    signo                          shift and go to state 39
    exprecion                      shift and go to state 77
    termino                        shift and go to state 42
    exp                            shift and go to state 111
    factor                         shift and go to state 43

state 102

    (37) escritura -> WRITE PARI exp PARD . PCOMA

    PCOMA           shift and go to state 112


state 103

    (34) asignacion -> ID ASIG exprecion PCOMA .

    END             reduce using rule 34 (asignacion -> ID ASIG exprecion PCOMA .)
    ID              reduce using rule 34 (asignacion -> ID ASIG exprecion PCOMA .)
    READ            reduce using rule 34 (asignacion -> ID ASIG exprecion PCOMA .)
    READLN          reduce using rule 34 (asignacion -> ID ASIG exprecion PCOMA .)
    WRITE           reduce using rule 34 (asignacion -> ID ASIG exprecion PCOMA .)
    WRITELN         reduce using rule 34 (asignacion -> ID ASIG exprecion PCOMA .)
    BEGIN           reduce using rule 34 (asignacion -> ID ASIG exprecion PCOMA .)
    IF              reduce using rule 34 (asignacion -> ID ASIG exprecion PCOMA .)
    WHILE           reduce using rule 34 (asignacion -> ID ASIG exprecion PCOMA .)
    ELSE            reduce using rule 34 (asignacion -> ID ASIG exprecion PCOMA .)


state 104

    (31) declaracion_if -> IF exprecion THEN declaracion .
    (32) declaracion_if -> IF exprecion THEN declaracion . ELSE declaracion

  ! shift/reduce conflict for ELSE resolved as shift
    END             reduce using rule 31 (declaracion_if -> IF exprecion THEN declaracion .)
    ID              reduce using rule 31 (declaracion_if -> IF exprecion THEN declaracion .)
    READ            reduce using rule 31 (declaracion_if -> IF exprecion THEN declaracion .)
    READLN          reduce using rule 31 (declaracion_if -> IF exprecion THEN declaracion .)
    WRITE           reduce using rule 31 (declaracion_if -> IF exprecion THEN declaracion .)
    WRITELN         reduce using rule 31 (declaracion_if -> IF exprecion THEN declaracion .)
    BEGIN           reduce using rule 31 (declaracion_if -> IF exprecion THEN declaracion .)
    IF              reduce using rule 31 (declaracion_if -> IF exprecion THEN declaracion .)
    WHILE           reduce using rule 31 (declaracion_if -> IF exprecion THEN declaracion .)
    ELSE            shift and go to state 113

  ! ELSE            [ reduce using rule 31 (declaracion_if -> IF exprecion THEN declaracion .) ]


state 105

    (38) escritura -> WRITELN PARI exp PARD . PCOMA

    PCOMA           shift and go to state 114


state 106

    (36) lectura -> READLN PARI ID PARD . PCOMA

    PCOMA           shift and go to state 115


state 107

    (12) type_array -> ARRAY CORI . rango CORD OF type_simple
    (13) rango -> . CNUM PUNTO PUNTO CNUM

    CNUM            shift and go to state 116

    rango                          shift and go to state 117

state 108

    (6) declaracion_variable -> VAR dec DPUN type PCOMA .
    (7) declaracion_variable -> VAR dec DPUN type PCOMA . declaracion_variable
    (6) declaracion_variable -> . VAR dec DPUN type PCOMA
    (7) declaracion_variable -> . VAR dec DPUN type PCOMA declaracion_variable

    BEGIN           reduce using rule 6 (declaracion_variable -> VAR dec DPUN type PCOMA .)
    VAR             shift and go to state 12

    declaracion_variable           shift and go to state 118

state 109

    (35) lectura -> READ PARI ID PARD PCOMA .

    END             reduce using rule 35 (lectura -> READ PARI ID PARD PCOMA .)
    ID              reduce using rule 35 (lectura -> READ PARI ID PARD PCOMA .)
    READ            reduce using rule 35 (lectura -> READ PARI ID PARD PCOMA .)
    READLN          reduce using rule 35 (lectura -> READ PARI ID PARD PCOMA .)
    WRITE           reduce using rule 35 (lectura -> READ PARI ID PARD PCOMA .)
    WRITELN         reduce using rule 35 (lectura -> READ PARI ID PARD PCOMA .)
    BEGIN           reduce using rule 35 (lectura -> READ PARI ID PARD PCOMA .)
    IF              reduce using rule 35 (lectura -> READ PARI ID PARD PCOMA .)
    WHILE           reduce using rule 35 (lectura -> READ PARI ID PARD PCOMA .)
    ELSE            reduce using rule 35 (lectura -> READ PARI ID PARD PCOMA .)


state 110

    (45) exprecion_simple -> signo termino adicion exprecion_simple .

    EQ              reduce using rule 45 (exprecion_simple -> signo termino adicion exprecion_simple .)
    LT              reduce using rule 45 (exprecion_simple -> signo termino adicion exprecion_simple .)
    GT              reduce using rule 45 (exprecion_simple -> signo termino adicion exprecion_simple .)
    GE              reduce using rule 45 (exprecion_simple -> signo termino adicion exprecion_simple .)
    LE              reduce using rule 45 (exprecion_simple -> signo termino adicion exprecion_simple .)
    DO              reduce using rule 45 (exprecion_simple -> signo termino adicion exprecion_simple .)
    THEN            reduce using rule 45 (exprecion_simple -> signo termino adicion exprecion_simple .)
    PARD            reduce using rule 45 (exprecion_simple -> signo termino adicion exprecion_simple .)
    COMA            reduce using rule 45 (exprecion_simple -> signo termino adicion exprecion_simple .)
    PCOMA           reduce using rule 45 (exprecion_simple -> signo termino adicion exprecion_simple .)


state 111

    (40) exp -> exprecion COMA exp .

    PARD            reduce using rule 40 (exp -> exprecion COMA exp .)


state 112

    (37) escritura -> WRITE PARI exp PARD PCOMA .

    END             reduce using rule 37 (escritura -> WRITE PARI exp PARD PCOMA .)
    ID              reduce using rule 37 (escritura -> WRITE PARI exp PARD PCOMA .)
    READ            reduce using rule 37 (escritura -> WRITE PARI exp PARD PCOMA .)
    READLN          reduce using rule 37 (escritura -> WRITE PARI exp PARD PCOMA .)
    WRITE           reduce using rule 37 (escritura -> WRITE PARI exp PARD PCOMA .)
    WRITELN         reduce using rule 37 (escritura -> WRITE PARI exp PARD PCOMA .)
    BEGIN           reduce using rule 37 (escritura -> WRITE PARI exp PARD PCOMA .)
    IF              reduce using rule 37 (escritura -> WRITE PARI exp PARD PCOMA .)
    WHILE           reduce using rule 37 (escritura -> WRITE PARI exp PARD PCOMA .)
    ELSE            reduce using rule 37 (escritura -> WRITE PARI exp PARD PCOMA .)


state 113

    (32) declaracion_if -> IF exprecion THEN declaracion ELSE . declaracion
    (23) declaracion -> . declaracion_simple
    (24) declaracion -> . declaracion_estructurada
    (25) declaracion_simple -> . asignacion
    (26) declaracion_simple -> . lectura
    (27) declaracion_simple -> . escritura
    (28) declaracion_estructurada -> . declaraciones_compuesta
    (29) declaracion_estructurada -> . declaracion_if
    (30) declaracion_estructurada -> . declaracion_while
    (34) asignacion -> . ID ASIG exprecion PCOMA
    (35) lectura -> . READ PARI ID PARD PCOMA
    (36) lectura -> . READLN PARI ID PARD PCOMA
    (37) escritura -> . WRITE PARI exp PARD PCOMA
    (38) escritura -> . WRITELN PARI exp PARD PCOMA
    (20) declaraciones_compuesta -> . BEGIN decla END
    (31) declaracion_if -> . IF exprecion THEN declaracion
    (32) declaracion_if -> . IF exprecion THEN declaracion ELSE declaracion
    (33) declaracion_while -> . WHILE exprecion DO declaracion

    ID              shift and go to state 21
    READ            shift and go to state 13
    READLN          shift and go to state 27
    WRITE           shift and go to state 18
    WRITELN         shift and go to state 24
    BEGIN           shift and go to state 6
    IF              shift and go to state 22
    WHILE           shift and go to state 14

    declaraciones_compuesta        shift and go to state 23
    declaracion_while              shift and go to state 15
    asignacion                     shift and go to state 25
    lectura                        shift and go to state 17
    declaracion_if                 shift and go to state 19
    declaracion_simple             shift and go to state 20
    declaracion_estructurada       shift and go to state 16
    declaracion                    shift and go to state 119
    escritura                      shift and go to state 29

state 114

    (38) escritura -> WRITELN PARI exp PARD PCOMA .

    END             reduce using rule 38 (escritura -> WRITELN PARI exp PARD PCOMA .)
    ID              reduce using rule 38 (escritura -> WRITELN PARI exp PARD PCOMA .)
    READ            reduce using rule 38 (escritura -> WRITELN PARI exp PARD PCOMA .)
    READLN          reduce using rule 38 (escritura -> WRITELN PARI exp PARD PCOMA .)
    WRITE           reduce using rule 38 (escritura -> WRITELN PARI exp PARD PCOMA .)
    WRITELN         reduce using rule 38 (escritura -> WRITELN PARI exp PARD PCOMA .)
    BEGIN           reduce using rule 38 (escritura -> WRITELN PARI exp PARD PCOMA .)
    IF              reduce using rule 38 (escritura -> WRITELN PARI exp PARD PCOMA .)
    WHILE           reduce using rule 38 (escritura -> WRITELN PARI exp PARD PCOMA .)
    ELSE            reduce using rule 38 (escritura -> WRITELN PARI exp PARD PCOMA .)


state 115

    (36) lectura -> READLN PARI ID PARD PCOMA .

    END             reduce using rule 36 (lectura -> READLN PARI ID PARD PCOMA .)
    ID              reduce using rule 36 (lectura -> READLN PARI ID PARD PCOMA .)
    READ            reduce using rule 36 (lectura -> READLN PARI ID PARD PCOMA .)
    READLN          reduce using rule 36 (lectura -> READLN PARI ID PARD PCOMA .)
    WRITE           reduce using rule 36 (lectura -> READLN PARI ID PARD PCOMA .)
    WRITELN         reduce using rule 36 (lectura -> READLN PARI ID PARD PCOMA .)
    BEGIN           reduce using rule 36 (lectura -> READLN PARI ID PARD PCOMA .)
    IF              reduce using rule 36 (lectura -> READLN PARI ID PARD PCOMA .)
    WHILE           reduce using rule 36 (lectura -> READLN PARI ID PARD PCOMA .)
    ELSE            reduce using rule 36 (lectura -> READLN PARI ID PARD PCOMA .)


state 116

    (13) rango -> CNUM . PUNTO PUNTO CNUM

    PUNTO           shift and go to state 120


state 117

    (12) type_array -> ARRAY CORI rango . CORD OF type_simple

    CORD            shift and go to state 121


state 118

    (7) declaracion_variable -> VAR dec DPUN type PCOMA declaracion_variable .

    BEGIN           reduce using rule 7 (declaracion_variable -> VAR dec DPUN type PCOMA declaracion_variable .)


state 119

    (32) declaracion_if -> IF exprecion THEN declaracion ELSE declaracion .

    END             reduce using rule 32 (declaracion_if -> IF exprecion THEN declaracion ELSE declaracion .)
    ID              reduce using rule 32 (declaracion_if -> IF exprecion THEN declaracion ELSE declaracion .)
    READ            reduce using rule 32 (declaracion_if -> IF exprecion THEN declaracion ELSE declaracion .)
    READLN          reduce using rule 32 (declaracion_if -> IF exprecion THEN declaracion ELSE declaracion .)
    WRITE           reduce using rule 32 (declaracion_if -> IF exprecion THEN declaracion ELSE declaracion .)
    WRITELN         reduce using rule 32 (declaracion_if -> IF exprecion THEN declaracion ELSE declaracion .)
    BEGIN           reduce using rule 32 (declaracion_if -> IF exprecion THEN declaracion ELSE declaracion .)
    IF              reduce using rule 32 (declaracion_if -> IF exprecion THEN declaracion ELSE declaracion .)
    WHILE           reduce using rule 32 (declaracion_if -> IF exprecion THEN declaracion ELSE declaracion .)
    ELSE            reduce using rule 32 (declaracion_if -> IF exprecion THEN declaracion ELSE declaracion .)


state 120

    (13) rango -> CNUM PUNTO . PUNTO CNUM

    PUNTO           shift and go to state 122


state 121

    (12) type_array -> ARRAY CORI rango CORD . OF type_simple

    OF              shift and go to state 123


state 122

    (13) rango -> CNUM PUNTO PUNTO . CNUM

    CNUM            shift and go to state 124


state 123

    (12) type_array -> ARRAY CORI rango CORD OF . type_simple
    (14) type_simple -> . INT
    (15) type_simple -> . STR
    (16) type_simple -> . BOOL
    (17) type_simple -> . FLOAT
    (18) type_simple -> . CHAR

    INT             shift and go to state 84
    STR             shift and go to state 89
    BOOL            shift and go to state 88
    FLOAT           shift and go to state 85
    CHAR            shift and go to state 86

    type_simple                    shift and go to state 125

state 124

    (13) rango -> CNUM PUNTO PUNTO CNUM .

    CORD            reduce using rule 13 (rango -> CNUM PUNTO PUNTO CNUM .)


state 125

    (12) type_array -> ARRAY CORI rango CORD OF type_simple .

    PCOMA           reduce using rule 12 (type_array -> ARRAY CORI rango CORD OF type_simple .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 104 resolved as shift
